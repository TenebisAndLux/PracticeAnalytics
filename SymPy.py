import sympy as sp

#################################
x = sp.Symbol("x")
print(x)
#################################
print(2 * x + x - 5)
print(sp.sin(x) ** 2 + sp.cos(x) ** 2)
#################################
expr = x * (x + 2)
print(expr.expand())
#################################
print(sp.symbols("s t"))
#################################
s, t = sp.symbols("s t")
poly = t * (s + 2) * (t - 3)
print(poly)
print(poly.expand())
#################################
expr = x ** 2 + 2 * x - 15
print(expr.factor())
#################################
x_v = sp.symbols("x0:3")
print(x_v)
#################################
ex = x_v[0] ** 2 * x_v[1] * x_v[2] + x_v[0] * x_v[1] * x_v[2]
print(ex)
print(sp.factor(ex))
#################################
expr = x ** (1 / 3)
print(expr)
expr = x ** (sp.Integer(1) / sp.Integer(3))
print(expr)
#################################
print(3 * sp.pi)
print(sp.oo - sp.oo)
#################################
# SymPy способна решать широкий класс полиномиальных уравнений.
# Также при помощи данной библиотеки можно решать и системы уравнений.
# При этом переменные, относительно которых должна быть разрешена система,
# передаются в виде кортежа во втором аргументе функции solve(), которая используется для таких задач.
#################################
eq = sp.Eq(x ** 2, 5)
print(eq)

print(sp.solveset(eq))
#################################
eq2 = sp.Eq(sp.cos(x) - sp.sin(x), 0)
print(eq2)

print(sp.solveset(eq2))
#################################
# sp.factor()-Умножает выражения. Вынести все общее.
# sp.expand()-Расширяет выражения. Внести все в скобки.
# sp.cancel()- Переводит рациональные функции в стандартную каноническую форму.
# sp.apart()- Выполняет частичное дробное разложение функции.
# sp.simplify()- - Общая функция упрощения.
#################################
trig = (sp.cos(x) + sp.sin(x)) ** 2 - sp.cos(x) ** 2
print(trig.expand())
#################################
# subs() - Подставляет в выражение.
# sp.N() - Преобразует символьное число в числовое.
#################################
x0 = sp.Symbol("x0")
expr = x0 ** 2 + 5
print(expr.subs(x0, 2))
#################################
print(sp.N(sp.pi))
print(sp.N(sp.pi, 3))
#################################
# sp.diff() - Вычисляет производную выражения.
# sp.rewrite() - Переписывает функцию в терминах другой функции.
#################################
expr = sp.exp(2 * x) + sp.sin(x)
print(expr)
print(sp.diff(expr))
#################################
# sp.integrate - интегрировать функцию
#################################
y = sp.Symbol("y")
g = x ** y
print(g)
h = sp.integrate(g, x)
print(h)

f = sp.sin(3 * x) * sp.cos(2 * x)

print(sp.integrate(f, (x, 0, sp.pi)))
#################################
# Для разложения выражения в ряд Тейлора используется следующий синтаксис: series(expr, var)
#################################
print(sp.series(sp.cos(x), x))
#################################
# Для вычисления пределов в SymPy предусмотрен очень простой синтаксис, а именно
# limit(function, variable, point). Например, если вы хотите вычислить предел функции f(x),
# где x -> 0, то надо написать limit(f(x), x, 0).
#################################
print(sp.limit(sp.sin(x) / x, x, 0))
#################################
#Также в SymPy реализована возможность решения булевых уравнений,
#что по сути означает проверку булевого выражения на истинность.
#Для этого используется функция satisfiable().
#################################
print(sp.satisfiable(x & y))
#################################
# Матрицы в SymPy создаются как экземпляры класса Matrix
#################################
x, y = sp.symbols("x, y")
A = sp.Matrix([[1, x], [y, 1]])
print(A)
B = A ** 2
print(B)
#################################
# При помощи библиотеки SymPy можно решать некоторые обыкновенные дифференциальные уравнения.
# Для этого используется функция dsolve(). Для начала нам надо задать неопределенную функцию.
# Это можно сделать, передав параметр cls=Function в функцию symbols().
#################################
f, g = sp.symbols('f g', cls=sp.Function)
print(f(x))
print(f(x).diff(x, x, 1) + f(x))
#################################